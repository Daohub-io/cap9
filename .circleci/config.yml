# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  # build-evm:
  #   docker:
  #     # specify the version you desire here
  #     - image: circleci/node:9

  #     # Specify service dependencies here if necessary
  #     # CircleCI maintains a library of pre-built images
  #     # documented at https://circleci.com/docs/2.0/circleci-images/
  #     # - image: circleci/mongo:3.4.4

  #   working_directory: ~/repo

  #   steps:
  #     - checkout

  #     # Download and cache dependencies
  #     - restore_cache:
  #         keys:
  #         - v1-dependencies-{{ checksum "evm1/package.json" }}
  #         # fallback to using the latest cache if no exact match is found
  #         - v1-dependencies-

  #     - run: cd evm1 && npm install
  #     - run: cd evm1 && chmod +x ./scripts/test.sh

  #     - save_cache:
  #         paths:
  #           - evm1/node_modules
  #         key: v1-dependencies-{{ checksum "evm1/package.json" }}

  #     # run tests!
  #     - run:
  #         name: Running Local EVM Instance
  #         command: ./evm1/node_modules/.bin/ganache-cli
  #         background: true
  #     - run: cd evm1 && ./node_modules/.bin/truffle test
  build:
    docker:
      - image: centos:latest
    working_directory: /tmp/my-project
    steps:
      - restore_cache:
          keys:
            - deps4-{{ .Branch }}-{{ .Revision }}
            # - deps4-{{ .Branch }}-cargo-{{ checksum "kernel-ewasm/Cargo.lock" }}
            - deps4-{{ .Branch }}-
            - deps4-
      - run:
          name: Install native build prequisites
          command: |
            yum -y update
            yum install -y systemd-devel git make gcc-c++ gcc file binutils
            curl -L "https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz" -o cmake.tar.gz
            tar -xzf cmake.tar.gz
            cp -r cmake-3.12.0-Linux-x86_64/* /usr/
            # only update cargo if it is not installed
            if [ ! -d /root/.cargo/bin ]
            then
              curl https://sh.rustup.rs -sSf | sh -s -- -y
            fi
            echo "PATH=/root/.cargo/bin:$PATH" >> ~/.profile
            . ~/.profile
            rustup default stable
            RUST_BACKTRACE=1
            rustc -vV
            cargo -V
            gcc -v
            g++ -v
            cmake --version
      - run:
          name: Install Parity
          command: |
            . ~/.profile
            cd ..
            # If the parity-ethereum directory does not exist, clone it
            if [ ! -d ./parity-ethereum ]
            then
              git clone https://github.com/Daohub-io/parity-ethereum.git
            fi
            cd parity-ethereum
            git fetch --all
            git checkout stable
            cargo build -j 1
            # cargo build --verbose --release --features final
            # strip target/debug/parity
            # file target/debug/parity
            cargo install --bin parity
      # - checkout
      - save_cache:
          key: deps4-{{ .Branch }}-cargo #-{{ checksum "kernel-ewasm/Cargo.lock" }}
          paths:
            - "~/.cargo"
            - ./parity-ethereum
      # - run:
      #     name: Get Submodules
      #     command: |
      #       git submodule update --init
      #       # apt install -y gcc g++ pkg-config file make cmake libgflags-dev perl yasm
      #       cargo install --git https://github.com/paritytech/parity-ethereum.git --bin parity parity-ethereum
      #       # cargo install --git https://github.com/Daohub-io/parity-ethereum.git --bin parity parity-ethereum
      # - run:
      #     name: Start local Ethereum network
      #     command: |
      #       cd kernel-ewasm
      #       # we need to run parity once to set up the accounts and keys
      #       # this only needs to be active for a few seconds (hence timeout)
      #       timeout 5 parity --config dev || true
      #       # We then run parity properly, now unlocking the previously setup
      #       # account
      #       parity  --config dev --chain ./wasm-dev-chain.json --jsonrpc-apis=all --ws-apis=all --reseal-min-period 0 --gasprice 0
      #     background: true
      # - run:
      #     name: Wait for Parity startup
      #     command: sleep 10
      # - run:
      #     name: Build Rust Component
      #     command: |
      #       cd kernel-ewasm && ./build.sh
      # - run:
      #     name: Test Rust Component
      #     command: |
      #       cd kernel-ewasm && npm install
      #       npm run test
